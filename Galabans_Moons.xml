<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Thursday, June 11, 2015, 12:26 PM -->
<!-- MuClient version 4.98 -->

<!-- Plugin "Galabans_Moons" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Galabans_Moons"
   author="Galaban"
   id="2e1f6126c7419c94e739611d"
   language="Lua"
   purpose="A basic moon monitoring plugin"
   save_state="y"
   date_written="2015-06-11 12:21:04"
   requires="4.81"
   version="1.0"
   >
<description trim="y">
<![CDATA[
This is a basic moon monitoring plugin.  The commands are:

moons  - shows the current state of the moons.
moons help - shows the help screen
moonticks - enable/disable showing the moons every tick
moonalerts - enable/disable the alerts regarding conjunctions
moonlevel - sets how much output to show
]]>
</description>

</plugin>

<!--  Get our standard constants -->

<include name="constants.lua"/>


<!--  Triggers  -->

<triggers>
  <trigger
   custom_colour="15"
   enabled="y"
   match="You notice the white moon falling to the west."
   name="trgWeather2"
   send_to="12"
   sequence="100"
  >
  <send></send>
  </trigger>
  <trigger
   enabled="y"
   match="You see the grey moon rising in the east."
   name="trgWeather3"
   send_to="12"
   sequence="100"
  >
  <send>
local vly = tonumber(GetVariable("vMoonTimerGrey"))
local lvl = tonumber(GetVariable("vMoonOutputLevel"))
if (vly ~= nil and lvl ~= nil and lvl == 4) then
    Note("Grey Moon Rising.  Resetting Current Value: "..vly.." to zero")
end
SetVariable("vMoonTimerGrey",0)</send>
  </trigger>
  <trigger
   enabled="y"
   match="You see the black moon rising in the east."
   name="trgWeather4"
   send_to="12"
   sequence="100"
  >
  <send>
local vly = tonumber(GetVariable("vMoonTimerBlack"))
local lvl = tonumber(GetVariable("vMoonOutputLevel"))
if (vly ~= nil and lvl ~= nil and lvl == 4) then
   Note("Black Moon Rising.  Resetting Current Value: "..vly.." to zero")
end
SetVariable("vMoonTimerBlack",0)</send>
  </trigger>
  <trigger
   enabled="y"
   keep_evaluating="y"
   match="--&gt; TICK &lt;--"
   name="trgWeather5"
   send_to="12"
   sequence="100"
  >
  <send>
local vlu = tonumber(GetVariable("vMoonTimerGrey"))
if (vlu ~= nil) then
    SetVariable("vMoonTimerGrey", vlu + 1)
end

vlu = tonumber(GetVariable("vMoonTimerWhite"))
if (vlu ~= nil) then
    SetVariable("vMoonTimerWhite", vlu + 1)
end

vlu = tonumber(GetVariable("vMoonTimerBlack"))
if (vlu ~= nil) then
    SetVariable("vMoonTimerBlack", vlu + 1)
end

moonTimerCheck(nil, nil, nil)

vlu = tonumber(GetVariable("vMoonTicks"))
if (vlu ~= nil and vlu == 1) then
    Execute("moons")
end
</send>
  </trigger>
  <trigger
   enabled="y"
   match="You notice the black moon falling to the west."
   name="trgWeather6"
   send_to="12"
   sequence="100"
  >
  <send>SetVariable("vMoonTimerBlack","12")</send>
  </trigger>
  <trigger
   enabled="y"
   match="You notice the white moon falling to the east."
   name="trgWeather7"
   send_to="12"
   sequence="100"
  >
  <send>SetVariable("vMoonTimerWhite","16")</send>
  </trigger>
  <trigger
   enabled="y"
   match="You notice the grey moon falling to the west."
   name="trgWeather8"
   send_to="12"
   sequence="100"
  >
  <send>SetVariable("vMoonTimerGrey","7")</send>
  </trigger>
  <trigger
   enabled="y"
   match="Welcome to Aardwolf. May your adventures be mystical, challenging and rewarding."
   name="trgCONNECT"
   send_to="12"
   sequence="100"
  >
  <send>SetVariable("vMoonTimerGrey","")
SetVariable("vMoonTimerWhite","")
SetVariable("vMoonTimerBlack","")</send>
  </trigger>
  <trigger
   enabled="y"
   match="You see the white moon rising in the west."
   name="trgWeather"
   send_to="12"
   sequence="100"
  >
  <send>local vly = tonumber(GetVariable("vMoonTimerWhite"))
local lvl = tonumber(GetVariable("vMoonOutputLevel"))
if (vly ~= nil and lvl ~= nil and lvl == 4) then
   Note("White Moon Rising.  Resetting Current Value: "..vly.." to zero")
end
SetVariable("vMoonTimerWhite",0)
</send>
  </trigger>
</triggers>

<!--  Aliases  -->

<aliases>
  <alias
   match="moonticks"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>local vlu = tonumber(GetVariable("vMoonTicks"))
if(vlu == nil or vlu == 0) then
   vlu = 1
   Note("Moonticks set to ON")
else
   vlu = 0
   Note("Moonticks set to OFF")
end

SetVariable("vMoonTicks", vlu)
</send>
  </alias>


  <alias
   match="moonlevel"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>
    help_moonlevel()
    </send>
  </alias>

  <alias
   match="moonlevel *"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>

	setMoonLevel("%1")
    </send>
  </alias>


  <alias
   match="moonalerts"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>
    help_moonalerts()
    </send>
  </alias>

  <alias
   match="moonalerts *"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>
	setAlertLevel("%1")

</send>
  </alias>

  <alias
   script="threeMoons"
   match="^(moon|moons)$"
   enabled="y"
   regexp="y"
   sequence="100"
  >
  </alias>

  <alias
   script="help_threeMoons"
   match="^(moon help|moons help)$"
   enabled="y"
   regexp="y"
   sequence="100"
  >
  </alias>

</aliases>

<!--  Variables  -->

<variables>
  <variable name="vMoonTicks">0</variable>
  <variable name="vMoonOutputLevel">3</variable>
  <variable name="vMoonAlerts">1</variable>
  <variable name="vMoonTimerBlack"></variable>
  <variable name="vMoonTimerGrey"></variable>
  <variable name="vMoonTimerWhite"></variable>
</variables>

<!--  Script  -->


<script>
<![CDATA[


function help_moonlevel()

    local curr = tonumber(GetVariable("vMoonOutputLevel"))
    if (curr == nil or curr < 1 or curr > 4) then
        curr = 2
        SetVariable("vMoonOutputLevel","2")
    end

    local moonalertshelp = [[

Moon Output Levels

This determines how much information is displayed when typing the "moons" command.

syntax:  moonlevel <level>

Levels:
1 - Shows only 3-moon conjunction data
2 - Shows 3-moon and 2-moon conjunctions
3 - Shows all moon information
4 - Debug

Current Setting: ]]..curr.. [[

]]

    print(moonalertshelp)

end


function help_moonalerts()

    local curr = tonumber(GetVariable("vMoonAlerts"))
    if (curr == nil or curr < 0 or curr > 2) then
        curr = 1
        SetVariable("vMoonAlerts","1")
    end


    local moonalertshelp = [[

Moon Alerts

This sets the amount of information that is displayed when a 3-moon or 2-moon 
conjunction is about to occur or is ocurring.  The alert is sent at each tick.

syntax:  moonalerts <level>

Levels:
0 - do not show any moon alerts
1 - show alerts for 3-moon conjunctions
2 - show alerst for 3-moon and 2-moon conjunctions

Current Setting:  ]]..curr..[[

]]

    print(moonalertshelp)

end


function help_threeMoons()
    local moonalertshelp = [[

This is Galaban's simple moon monitoring plugin.  The commands are:

moons       - shows the current state of the moons.

moons help  - shows this screen
moonticks   - enable/disable showing the moons every tick
moonalerts  - enable/disable the alerts regarding conjunctions
moonlevel   - sets how much output to show
    ]]

    print(moonalertshelp)

	local c_white = ANSI(1)..ANSI(37)
	local c_red = ANSI(1)..ANSI(31)
    AnsiNote(c_red.."NOTE: You must have "..c_white.."autotick"..c_red.." enabled for this plugin to work.\n")
    print("To gather the moon data, you must be outdoors to see the moons rise and fall.\n\n")

end


function setMoonLevel(input)
	local inVal = tonumber(input)

    if (inVal == nil or inVal < 0 or inVal > 4) then
        help_moonlevel()
	else
        Note("Output level set to ".. inVal)    
    	SetVariable("vMoonOutputLevel", inVal)
    end
end

function setAlertLevel(input)
    local inVal = tonumber(input)
    if (inVal == nil or inVal < 0 or inVal > 2) then
        help_moonalerts()
        return
    end

    if (inVal == 0) then
        Note("Moon alerts removed.")
    elseif (inVal == 1) then
        Note("Moon alerts set to 1.  (3-moons only)")
    else
        Note("Moon alerts set to 2.  (2 and 3-moon conjunctions)")
        inVal = 2
    end

    SetVariable("vMoonAlerts", inVal)    

end


function threeMoons(rName, rLine, rWildcards)

	local black = {curr= -1,start= -1,duration= -1,complete= 0,conj=""}
	local white = {curr= -1,start= -1,duration= -1,complete= 0,conj=""}
	local grey  = {curr= -1,start= -1,duration= -1,complete= 0,conj=""}
	local three = {curr= -1,start= -1,duration= -1,complete= 0,conj=""}

	-- 1: bold  22: cancel bold
	-- 31:red	32: Green 	33: Yellow 	34: Blue 	35: Magenta		36: Cyan 	37: White 

	--AnsiNote ("This is normal ", ANSI(1), ANSI (33), "and this is yellow on white")

	--Local output variables
	local c_white = ANSI(1)..ANSI(37)
	local c_grey = ANSI(22)..ANSI(37)
	local c_cyan = ANSI(1)..ANSI(36)
	local c_dcyan = ANSI(22)..ANSI(36)
	local c_blue = ANSI(22)..ANSI(34)
	local c_red = ANSI(1)..ANSI(31)
	local c_yellow = ANSI(1)..ANSI(33)
	local c_green = ANSI(1)..ANSI(32)

	local debugOutput = ""
	local nextmoons = ""
	local nextcalc = 0

	--	Load up the Global Variables
	grey.curr =  tonumber(GetVariable("vMoonTimerGrey"))
	black.curr = tonumber(GetVariable("vMoonTimerBlack"))
	white.curr = tonumber(GetVariable("vMoonTimerWhite"))
	local outputlevel = tonumber(GetVariable("vMoonOutputLevel"))

	if (outputlevel == nil or outputlevel < 1 or outputlevel > 4) then
		SetVariable("vMoonOutputLevel","2")
		outputlevel = 2
	end

	if (white.curr == nil) then
		Note("White moon is in an unknown state")
	else
		debugOutput = debugOutput..c_white.."White:   "..c_grey..white.curr.."              "
		if (white.curr > 17) then
			nextcalc = 66 - white.curr
			nextmoons = nextmoons..c_white.."White:   "..c_grey.."[in "..nextcalc.." ticks]   "
		else
			nextcalc = 18 - white.curr
			nextmoons = nextmoons..c_white.."White:   "..c_green.."Now "..c_grey.."("..nextcalc.." ticks left)   "
		end
	end	
	if (black.curr == nil) then
		Note("Black moon is in an unknown state")
	else
		debugOutput = debugOutput..c_blue.."Black:   "..c_grey..black.curr.."            "
		if (black.curr > 13) then
			nextcalc = 51 - black.curr;
			nextmoons = nextmoons..c_blue.."Black: "..c_grey.."[in "..nextcalc.." ticks]   "
		else
			nextcalc = 14 - black.curr;
			nextmoons = nextmoons..c_blue.."Black: "..c_green.."Now "..c_grey.."("..nextcalc.." ticks left)   "
		end
	end
	if (grey.curr == nil) then
		Note("Grey moon is in an unknown state")
	else
		debugOutput = debugOutput..c_dcyan.."Grey:   "..c_grey..grey.curr.."     "
		if (grey.curr > 8) then
			nextcalc = 31 - grey.curr
			nextmoons = nextmoons..c_dcyan.."Grey: "..c_grey.." [in "..nextcalc.." ticks]"
		else
			nextcalc = 9 - grey.curr
			nextmoons = nextmoons..c_dcyan.."Grey: "..c_green.."Now "..c_grey.."("..nextcalc.." ticks left)"
		end
	end

	if (outputlevel == 4) then
		AnsiNote(debugOutput)
	end
	if (outputlevel >= 3) then
		AnsiNote(nextmoons)
	end 
	if (grey.curr == nil or black.curr == nil or white.curr == nil) then
		AnsiNote(c_cyan.."Not all timers are set. Wait for more moons.")
		return
	end



	--	Note: Because these are table structures, they pass by reference.
	--	---------------------------------------
	moonCalc(black,white,grey,three);
	--	---------------------------------------



	local conjnote = c_cyan.."2-moons: "
	local sevcol = ""
	local show2moons = 0

	if (white.start == 0) then
		conjnote = conjnote..c_white.."White/"..white.conj..":"..c_green.." Now "..c_grey.."("..white.duration.." ticks left)   "
	else
		sevcol = c_grey
		if (white.start < 6) then
			sevcol = c_yellow
			show2moons = 1
		end
		conjnote = conjnote..c_white.."White/"..white.conj..":"..sevcol.."[in "..white.start.." ticks]"..c_grey.." (for "..white.duration.." ticks)   "
	end

	if (white.start ~= black.start) then
		if (black.start == 0) then
			conjnote = conjnote..c_blue.."Black/"..black.conj..":"..c_green.." Now "..c_grey.."("..black.duration.." ticks left)   "
		else
			sevcol = c_grey
			if (black.start < 6) then
				sevcol = c_yellow
				show2moons = 1
			end
			conjnote = conjnote..c_blue.."Black/"..black.conj..":"..sevcol.."[in "..black.start.." ticks]"..c_grey.." (for "..black.duration.." ticks)   "
		end
	end

	if (three.start ~= white.start or three.start ~= black.start) then
		if(outputlevel >= 2 or show2moons == 1) then
			AnsiNote(conjnote)
		end
	end


	if (three.start == 0) then
		conjnote = c_cyan.."3-moons:"..c_red.." NOW ("..three.duration.." ticks left)   "
	else
		if (three.start < 4) then
			sevcol = c_red
		else
			if (three.start < 20) then			
				sevcol = c_yellow
			else
				sevcol = c_grey
			end
		end
		conjnote = c_cyan.."3-moons: "..sevcol.."[in "..three.start.." ticks] (for "..three.duration.." ticks)   "
	end

	AnsiNote(conjnote)



end




function moonCalc(black, white, grey, three)


	--	DATA	SHINING		NOT SHINING
	--	Grey	1-8			9-30
	--  White   1-17		18-65
	--  Black   1-13	  	14-50
	local c_white = ANSI(1)..ANSI(37)
	local c_grey = ANSI(22)..ANSI(37)
	local c_blue = ANSI(22)..ANSI(34)
	local c_dcyan = ANSI(22)..ANSI(36)

	local txW = c_white.."w"..c_grey
	local txB = c_blue.."b"..c_grey
	local txG = c_dcyan.."g"..c_grey

	local tickCount = 0

	local shining = 0

	black.complete = 0
	white.complete = 0
	three.complete = 0

	-- 500 limit is a sanity check to prevent endless loops.
	while ((three.complete == 0 or black.complete == 0 or white.complete == 0) and tickCount < 500) do
		-- 
		---- Check to see if it's shining
		shining = 0
		if (grey.curr < 9) then
			shining = shining + 1
		end
		if (black.curr < 14) then
			shining = shining + 1
		end
		if (white.curr < 18) then
			shining = shining + 1
		end
		--	Look for conjunctions
		if (black.curr < 14 and shining >= 2) then
			if (black.start == -1) then
				black.start = tickCount
				if (white.curr < 18) then
					black.conj = txW
				end
				if (grey.curr < 9) then
					black.conj = txG
				end
			end
		else
			if (black.start ~= -1 and black.complete == 0) then
				black.duration = tickCount - black.start
				black.complete = 1
			end
		end

		if (white.curr < 18 and shining >= 2) then
			if (white.start == -1) then
				white.start = tickCount
				if (black.curr < 14) then
					white.conj = txB
				end
				if (grey.curr < 9) then
					white.conj = txG
				end
			end
		else
			-- If we started counting white, 2-moon conjunction, but haven't completed
			if (white.start ~= -1 and white.complete == 0) then
				white.duration = tickCount - white.start
				white.complete = 1
			end
		end
		-- Check to see if we have three moons
		if (shining == 3) then
			if (three.start == -1) then
				three.start = tickCount
			end
		else
			-- Check to see if we had 3 moons and no longer do
			if (three.start ~= -1 and three.complete == 0) then
				three.complete = 1
				three.duration = tickCount - three.start
			end
		end

		grey.curr = grey.curr  + 1
		black.curr = black.curr + 1
		white.curr = white.curr + 1
		tickCount = tickCount + 1

	--	DATA	SHINING		NOT SHINING
	--	Grey	1-8			9-30
	--  White   1-17		18-65
	--  Black   1-13	  	14-50
		if (white.curr > 65) then
			white.curr = 1
		end
		if (black.curr > 50) then
			black.curr = 1
		end
		if (grey.curr > 30) then
			grey.curr = 1
		end

	end -- while

--	if (outputlevel == 4) then
--		AnsiNote(c_grey.."Number of cycles:"..tickCount)
--	end

end



function moonTimerCheck(rName, rLine, rWildcards)

	local black = {curr=-1,start=-1,duration=-1,complete=-1,conj=""}
	local white = {curr=-1,start=-1,duration=-1,complete=-1,conj=""}
	local grey  = {curr=-1,start=-1,duration=-1,complete=-1,conj=""}
	local three = {curr=-1,start=-1,duration=-1,complete=-1,conj=""}

	-- 1: bold  22: cancel bold
	-- 31:red	32: Green 	33: Yellow 	34: Blue 	35: Magenta		36: Cyan 	37: White 
	--Local output variables
	local c_white = ANSI(1)..ANSI(37)
	local c_grey = ANSI(22)..ANSI(37)
	local c_cyan = ANSI(1)..ANSI(36)
	local c_dcyan = ANSI(22)..ANSI(36)
	local c_blue = ANSI(22)..ANSI(34)
	local c_red = ANSI(1)..ANSI(31)
	local c_yellow = ANSI(1)..ANSI(33)
	local c_green = ANSI(1)..ANSI(32)


	--	Load up the Global Variables
	grey.curr =  tonumber(GetVariable("vMoonTimerGrey"))
	black.curr = tonumber(GetVariable("vMoonTimerBlack"))
	white.curr = tonumber(GetVariable("vMoonTimerWhite"))


	local outputlevel = tonumber(GetVariable("vMoonAlerts"))
	if (outputlevel == nil) then
		outputlevel = 1
		Variable("vMoonAlerts","1")
	end

	-- in case we are inside, make sure these wrap
	if (white.curr~=nil and white.curr > 65) then
		SetVariable("vMoonTimerWhite","1")
		white.curr = 1
	end
	if (black.curr ~= nil and black.curr > 50) then
		SetVariable("vMoonTimerBlack","1")
		black.curr = 1
	end
	if (grey.curr~= nil and grey.curr > 30) then
		SetVariable("vMoonTimerGrey","1")
		grey.curr = 1
	end

	if (grey.curr == nil or black.curr == nil or white.curr == nil) then
		return
	end

	if (outputlevel == 0) then
		return;
	end

	-- Make sure the wrapping (above) occurs before the moonCalc (below)

	--	Note: Because these are table structures, they pass by reference.
	--	---------------------------------------
	moonCalc(black,white,grey,three);
	--	---------------------------------------

	--	DATA	SHINING		NOT SHINING
	--	Grey	1-8			9-30
	--  White   1-17		18-65
	--  Black   1-13	  	14-50
	local havealerted = 0
	if (three.start == 0) then
        AnsiNote(c_grey.." --------------------------- ")
		AnsiNote(c_grey.." [ "..c_white..". "..c_dcyan.."o "..c_blue.."O  "..c_white.."Three Moons "..c_blue.."O "..c_dcyan.."o "..c_white..". ]")
        AnsiNote(c_grey.." --------------------------- ")
        havealerted = 1
	end

	-- Only 3-moons?  ignore all 2-moon and pre-emptive alerts
	if (outputlevel == 1) then
		havealerted = 1
	end

	if (havealerted == 0 and white.start == 0) then
		 AnsiNote(c_grey.."[ . o "..c_white.."Two Moons "..c_grey.."o . ]")
		havealerted = 1
	end

	--	We don't have 2/3 moons yet (havealerted == 0).  What about in N ticks?

	if (havealerted  == 0 and three.start <= 5) then
		Note("[ . o O THREE Moons in "..three.start.." ticks (for "..three.duration.." ticks) O o . ]")
		havealerted = 1
	end 

	if (havealerted == 0 and white.start < 4) then
		Note(". o Two Moons in "..white.start.." ticks o .")
	end

end


]]>
</script>


<!--  Plugin help  -->

<aliases>
  <alias
   script="OnHelp"
   match="Galabans_Moons:help"
   enabled="y"
  >
  </alias>
</aliases>

<script>
<![CDATA[
function OnHelp ()
  world.Note (world.GetPluginInfo (world.GetPluginID (), 3))
end
]]>
</script> 

</muclient>
